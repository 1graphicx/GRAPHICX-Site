// Variables globales
let filesAdded = [];
let currentFontSize = 14;
let rules = null;
let isProcessing = false; // Nouvelle variable pour √©viter les clics multiples

// Initialisation
document.addEventListener('DOMContentLoaded', async function() {
    // Charger les r√®gles
    rules = await window.gfxConfig.loadRules();
    
    initializeDragAndDrop();
    initializeFileInput();
    initializeButtons();
    updateStatus();
    
    logToConsole('üöÄ GFX Tool Web Version initialis√©e', 'success');
    logToConsole('‚òÅÔ∏è Mode cloud activ√© - Connexion √† graphicx.store', 'info');
    logToConsole('üìÅ Pr√™t √† traiter vos fichiers !', 'info');
});

// Initialisation du drag & drop
function initializeDragAndDrop() {
    const dropZone = document.getElementById('dropZone');
    
    dropZone.addEventListener('dragover', function(e) {
        e.preventDefault();
        dropZone.classList.add('dragover');
    });
    
    dropZone.addEventListener('dragleave', function(e) {
        e.preventDefault();
        dropZone.classList.remove('dragover');
    });
    
    dropZone.addEventListener('drop', function(e) {
        e.preventDefault();
        dropZone.classList.remove('dragover');
        
        const files = Array.from(e.dataTransfer.files);
        addFiles(files);
    });
    
    dropZone.addEventListener('click', function() {
        document.getElementById('fileInput').click();
    });
}

// Initialisation de l'input file
function initializeFileInput() {
    const fileInput = document.getElementById('fileInput');
    
    fileInput.addEventListener('change', function(e) {
        const files = Array.from(e.target.files);
        addFiles(files);
    });
}

// Initialisation des boutons avec gestion d'√©tat
function initializeButtons() {
    const buttons = document.querySelectorAll('.btn');
    
    buttons.forEach(button => {
        // Ajouter un d√©lai de protection contre les clics multiples
        button.addEventListener('click', function(e) {
            if (isProcessing && this.classList.contains('primary')) {
                e.preventDefault();
                return;
            }
            
            // Ajouter un effet de ripple
            createRippleEffect(e, this);
        });
        
        // Am√©liorer l'accessibilit√©
        button.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
    });
}

// Effet de ripple pour les boutons
function createRippleEffect(event, button) {
    const ripple = document.createElement('span');
    const rect = button.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    const x = event.clientX - rect.left - size / 2;
    const y = event.clientY - rect.top - size / 2;
    
    ripple.style.width = ripple.style.height = size + 'px';
    ripple.style.left = x + 'px';
    ripple.style.top = y + 'px';
    ripple.classList.add('ripple');
    
    button.appendChild(ripple);
    
    setTimeout(() => {
        ripple.remove();
    }, 600);
}

// Ajout de fichiers
function addFiles(files) {
    files.forEach(file => {
        if (!filesAdded.some(f => f.name === file.name && f.size === file.size)) {
            filesAdded.push(file);
            console.log(`Ajout√© fichier : ${file.name}`);
        }
    });
    
    refreshFileList();
    updateStatus();
}

// Rafra√Æchir la liste des fichiers
function refreshFileList() {
    const fileList = document.getElementById('fileList');
    fileList.innerHTML = '';
    
    if (filesAdded.length === 0) {
        const emptyMessage = document.createElement('div');
        emptyMessage.className = 'file-item unknown';
        emptyMessage.textContent = 'Aucun fichier s√©lectionn√©';
        fileList.appendChild(emptyMessage);
        return;
    }
    
    // Grouper les fichiers par type
    const fileGroups = {};
    
    filesAdded.forEach(file => {
        const extension = getFileExtension(file.name);
        if (!fileGroups[extension]) {
            fileGroups[extension] = [];
        }
        fileGroups[extension].push(file);
    });
    
    // Afficher les fichiers group√©s
    Object.keys(fileGroups).forEach(extension => {
        const files = fileGroups[extension];
        
        // En-t√™te du groupe
        const groupHeader = document.createElement('div');
        groupHeader.className = 'file-item folder';
        groupHeader.textContent = `[+] ${extension.toUpperCase()} Files (${files.length})`;
        fileList.appendChild(groupHeader);
        
        // Fichiers du groupe
        files.forEach(file => {
            const fileItem = document.createElement('div');
            const rule = matchRuleForFile(file.name);
            fileItem.className = `file-item ${rule ? 'recognized' : 'unknown'}`;
            
            let displayText = ` ‚§∑ [${rule ? '+' : 'x'}] ${file.name}`;
            if (rule) {
                displayText += ` ‚Üí ${rule.action}`;
            }
            
            fileItem.textContent = displayText;
            fileList.appendChild(fileItem);
        });
    });
}

// Obtenir l'extension d'un fichier
function getFileExtension(filename) {
    return filename.split('.').pop().toLowerCase();
}

// V√©rifier si un fichier correspond √† une r√®gle
function matchRuleForFile(filename) {
    return window.gfxConfig.matchRuleForFile(filename);
}

// V√©rifier si un nom de fichier correspond √† un pattern
function filenameMatch(filename, pattern) {
    return window.gfxConfig.filenameMatch(filename, pattern);
}

// S√©lectionner des fichiers
function selectFiles() {
    if (isProcessing) return;
    document.getElementById('fileInput').click();
}

// S√©lectionner des dossiers (simulation - les navigateurs ne permettent pas de s√©lectionner des dossiers directement)
function selectFolders() {
    if (isProcessing) return;
    logToConsole('‚ö†Ô∏è S√©lection de dossiers non support√©e dans cette version web', 'warning');
    logToConsole('üí° Utilisez la s√©lection de fichiers ou le drag & drop', 'info');
}

// Effacer tous les fichiers
function clearFiles() {
    if (isProcessing) return;
    filesAdded = [];
    refreshFileList();
    updateProgress(0);
    updateStatus();
    logToConsole('üóëÔ∏è Tous les fichiers ont √©t√© effac√©s', 'info');
}

// Patcher les fichiers
async function patchFiles() {
    if (isProcessing) {
        logToConsole('‚ö†Ô∏è Traitement d√©j√† en cours...', 'warning');
        return;
    }
    
    if (filesAdded.length === 0) {
        logToConsole('‚ùå Aucun fichier √† traiter', 'error');
        return;
    }
    
    // D√©sactiver les boutons pendant le traitement
    setButtonsState(true);
    isProcessing = true;
    
    logToConsole('üöÄ D√©but du traitement des fichiers...', 'info');
    updateProgress(10);
    
    try {
        // Utiliser uniquement le serveur graphicx.store
        const serverUrl = 'https://graphicx.store/gfxtool/api/process-files';
        
        const formData = new FormData();
        filesAdded.forEach(file => {
            formData.append('files', file);
        });

        logToConsole('üì° Connexion au serveur graphicx.store...', 'info');
        updateProgress(25);

        const response = await fetch(serverUrl, {
            method: 'POST',
            body: formData
        });

        if (response.ok) {
            const result = await response.json();
            updateProgress(100);
            
            if (result.success) {
                logToConsole('üéâ Traitement termin√© avec succ√®s !', 'success');
                
                // Afficher les r√©sultats
                result.results.forEach(r => {
                    if (r.status === 'success') {
                        logToConsole(`‚úÖ ${r.action || r.filename}: ${r.output}`, 'success');
                        
                        // Si un installateur a √©t√© cr√©√©, afficher le bouton de t√©l√©chargement
                        if (r.installer) {
                            logToConsole(`üì¶ Installateur cr√©√©: ${r.installer}`, 'info');
                            showDownloadButton(r.installer);
                        }
                    } else {
                        logToConsole(`‚ùå ${r.action || r.filename}: ${r.message}`, 'error');
                    }
                });
                
                // Afficher tous les installateurs cr√©√©s
                if (result.installers_created && result.installers_created.length > 0) {
                    logToConsole(`üéÅ ${result.installers_created.length} installateur(s) cr√©√©(s) !`, 'success');
                    result.installers_created.forEach(installer => {
                        showDownloadButton(installer);
                    });
                }
            } else {
                logToConsole('‚ùå Erreur lors du traitement', 'error');
            }
        } else {
            throw new Error(`Erreur serveur: ${response.status} - ${response.statusText}`);
        }
    } catch (error) {
        console.error('Erreur de connexion au serveur:', error);
        logToConsole('‚ùå Impossible de se connecter au serveur graphicx.store', 'error');
        logToConsole('üí° V√©rifiez votre connexion internet ou r√©essayez plus tard', 'info');
        
        // R√©activer les boutons en cas d'erreur
        setButtonsState(false);
        isProcessing = false;
        updateProgress(0);
        return;
    } finally {
        // R√©activer les boutons apr√®s le traitement
        setButtonsState(false);
        isProcessing = false;
    }
}

// G√©rer l'√©tat des boutons
function setButtonsState(disabled) {
    const buttons = document.querySelectorAll('.btn');
    buttons.forEach(button => {
        if (disabled) {
            button.disabled = true;
            button.style.opacity = '0.6';
            button.style.cursor = 'not-allowed';
        } else {
            button.disabled = false;
            button.style.opacity = '1';
            button.style.cursor = 'pointer';
        }
    });
}

// Ouvrir le site Graphicx
function openGraphicx() {
    window.open('https://graphicx.store/', '_blank');
}

// Mettre √† jour la barre de progression
function updateProgress(percentage) {
    const progressFill = document.getElementById('progressFill');
    progressFill.style.width = percentage + '%';
}

// Mettre √† jour le statut
function updateStatus() {
    const status = document.getElementById('status');
    status.textContent = `${filesAdded.length} fichier(s) charg√©(s)`;
}

// Logger dans la console
function logToConsole(message, type = 'info') {
    const console = document.getElementById('console');
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = document.createElement('div');
    logEntry.className = type;
    logEntry.textContent = `[${timestamp}] ${message}`;
    console.appendChild(logEntry);
    console.scrollTop = console.scrollHeight;
}

// Gestion du zoom de la console (simulation)
document.addEventListener('wheel', function(e) {
    if (e.ctrlKey) {
        e.preventDefault();
        const console = document.getElementById('console');
        const currentSize = parseInt(getComputedStyle(console).fontSize);
        const newSize = Math.max(8, Math.min(20, currentSize + (e.deltaY > 0 ? -1 : 1)));
        console.style.fontSize = newSize + 'px';
    }
});

// Export des fonctions pour l'utilisation globale
window.selectFiles = selectFiles;
window.selectFolders = selectFolders;
window.clearFiles = clearFiles;
window.patchFiles = patchFiles;
window.openGraphicx = openGraphicx; 

function showDownloadButton(installerName) {
    // V√©rifier si le bouton existe d√©j√†
    const existingBtn = document.querySelector(`[data-installer="${installerName}"]`);
    if (existingBtn) {
        logToConsole(`üì• Bouton de t√©l√©chargement d√©j√† pr√©sent pour: ${installerName}`, 'info');
        return;
    }
    
    // Cr√©er un bouton de t√©l√©chargement am√©lior√©
    const downloadBtn = document.createElement('button');
    downloadBtn.className = 'btn primary download-btn';
    downloadBtn.setAttribute('data-installer', installerName);
    downloadBtn.innerHTML = `üì• T√©l√©charger ${installerName}`;
    downloadBtn.onclick = (e) => {
        // Ajouter l'effet de ripple
        createRippleEffect(e, downloadBtn);
        // Lancer le t√©l√©chargement apr√®s un court d√©lai pour l'effet visuel
        setTimeout(() => downloadInstaller(installerName), 150);
    };
    
    // Ajouter la gestion du clavier
    downloadBtn.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.click();
        }
    });
    
    // Ajouter le bouton √† l'interface avec animation
    const buttonsContainer = document.querySelector('.buttons');
    downloadBtn.style.opacity = '0';
    downloadBtn.style.transform = 'translateY(20px)';
    buttonsContainer.appendChild(downloadBtn);
    
    // Animation d'apparition
    setTimeout(() => {
        downloadBtn.style.transition = 'all 0.3s ease';
        downloadBtn.style.opacity = '1';
        downloadBtn.style.transform = 'translateY(0)';
    }, 100);
    
    // Afficher un message dans la console
    logToConsole(`üì• Bouton de t√©l√©chargement ajout√© pour: ${installerName}`, 'info');
}

async function downloadInstaller(installerName) {
    try {
        // D√©sactiver temporairement le bouton
        const downloadBtn = document.querySelector(`[data-installer="${installerName}"]`);
        if (downloadBtn) {
            downloadBtn.disabled = true;
            downloadBtn.innerHTML = `‚è≥ T√©l√©chargement...`;
        }
        
        // Utiliser uniquement le serveur graphicx.store
        const downloadUrl = `https://graphicx.store/gfxtool/api/download/${installerName}`;
        
        logToConsole(`üì• D√©but du t√©l√©chargement: ${installerName}`, 'info');
        
        // Cr√©er un lien temporaire pour le t√©l√©chargement
        const link = document.createElement('a');
        link.href = downloadUrl;
        link.download = installerName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        logToConsole(`‚úÖ T√©l√©chargement lanc√©: ${installerName}`, 'success');
        
        // R√©activer le bouton apr√®s un d√©lai
        setTimeout(() => {
            if (downloadBtn) {
                downloadBtn.disabled = false;
                downloadBtn.innerHTML = `üì• T√©l√©charger ${installerName}`;
            }
        }, 2000);
        
    } catch (error) {
        logToConsole(`‚ùå Erreur lors du t√©l√©chargement: ${error.message}`, 'error');
        
        // R√©activer le bouton en cas d'erreur
        const downloadBtn = document.querySelector(`[data-installer="${installerName}"]`);
        if (downloadBtn) {
            downloadBtn.disabled = false;
            downloadBtn.innerHTML = `üì• T√©l√©charger ${installerName}`;
        }
    }
} 